# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsAutoMLRunGetIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "run_id",
            "run_description",
            "status",
            "timestamp",
        }
        
        class properties:
            run_description = schemas.StrSchema
            run_id = schemas.StrSchema
            status = schemas.StrSchema
            timestamp = schemas.StrSchema
            engagement_type = schemas.StrSchema
        
            @staticmethod
            def input_label_summary() -> typing.Type['ModelsInputLabelSummary']:
                return ModelsInputLabelSummary
            number_of_inference_users = schemas.IntSchema
            number_of_train_users = schemas.IntSchema
        
            @staticmethod
            def run_metrics() -> typing.Type['ModelsAutoMLRunMetrics']:
                return ModelsAutoMLRunMetrics
            __annotations__ = {
                "run_description": run_description,
                "run_id": run_id,
                "status": status,
                "timestamp": timestamp,
                "engagement_type": engagement_type,
                "input_label_summary": input_label_summary,
                "number_of_inference_users": number_of_inference_users,
                "number_of_train_users": number_of_train_users,
                "run_metrics": run_metrics,
            }
    
    run_id: MetaOapg.properties.run_id
    run_description: MetaOapg.properties.run_description
    status: MetaOapg.properties.status
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["run_description"]) -> MetaOapg.properties.run_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["run_id"]) -> MetaOapg.properties.run_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement_type"]) -> MetaOapg.properties.engagement_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_label_summary"]) -> 'ModelsInputLabelSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_inference_users"]) -> MetaOapg.properties.number_of_inference_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_train_users"]) -> MetaOapg.properties.number_of_train_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["run_metrics"]) -> 'ModelsAutoMLRunMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["run_description", "run_id", "status", "timestamp", "engagement_type", "input_label_summary", "number_of_inference_users", "number_of_train_users", "run_metrics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["run_description"]) -> MetaOapg.properties.run_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["run_id"]) -> MetaOapg.properties.run_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement_type"]) -> typing.Union[MetaOapg.properties.engagement_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_label_summary"]) -> typing.Union['ModelsInputLabelSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_inference_users"]) -> typing.Union[MetaOapg.properties.number_of_inference_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_train_users"]) -> typing.Union[MetaOapg.properties.number_of_train_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["run_metrics"]) -> typing.Union['ModelsAutoMLRunMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["run_description", "run_id", "status", "timestamp", "engagement_type", "input_label_summary", "number_of_inference_users", "number_of_train_users", "run_metrics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        run_id: typing.Union[MetaOapg.properties.run_id, str, ],
        run_description: typing.Union[MetaOapg.properties.run_description, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, ],
        engagement_type: typing.Union[MetaOapg.properties.engagement_type, str, schemas.Unset] = schemas.unset,
        input_label_summary: typing.Union['ModelsInputLabelSummary', schemas.Unset] = schemas.unset,
        number_of_inference_users: typing.Union[MetaOapg.properties.number_of_inference_users, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        number_of_train_users: typing.Union[MetaOapg.properties.number_of_train_users, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        run_metrics: typing.Union['ModelsAutoMLRunMetrics', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsAutoMLRunGetIdResponse':
        return super().__new__(
            cls,
            *args,
            run_id=run_id,
            run_description=run_description,
            status=status,
            timestamp=timestamp,
            engagement_type=engagement_type,
            input_label_summary=input_label_summary,
            number_of_inference_users=number_of_inference_users,
            number_of_train_users=number_of_train_users,
            run_metrics=run_metrics,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_auto_ml_run_metrics import ModelsAutoMLRunMetrics
from hyperplane_python_sdk.model.models_input_label_summary import ModelsInputLabelSummary
