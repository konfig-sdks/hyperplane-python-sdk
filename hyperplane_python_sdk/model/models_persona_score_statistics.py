# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsPersonaScoreStatistics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Statistical attributes about the score distribution for a particular persona.
    """


    class MetaOapg:
        required = {
            "total_users_above_threshold",
            "total_users_with_non_zero_score",
            "persona_score_threshold",
            "score_average",
            "score_percentiles",
            "maximum_user_score",
            "minimum_user_score",
            "score_standard_deviation",
        }
        
        class properties:
            maximum_user_score = schemas.NumberSchema
            minimum_user_score = schemas.NumberSchema
            persona_score_threshold = schemas.NumberSchema
            score_average = schemas.NumberSchema
        
            @staticmethod
            def score_percentiles() -> typing.Type['ModelsPersonaScorePercentiles']:
                return ModelsPersonaScorePercentiles
            score_standard_deviation = schemas.NumberSchema
            total_users_above_threshold = schemas.IntSchema
            total_users_with_non_zero_score = schemas.IntSchema
            __annotations__ = {
                "maximum_user_score": maximum_user_score,
                "minimum_user_score": minimum_user_score,
                "persona_score_threshold": persona_score_threshold,
                "score_average": score_average,
                "score_percentiles": score_percentiles,
                "score_standard_deviation": score_standard_deviation,
                "total_users_above_threshold": total_users_above_threshold,
                "total_users_with_non_zero_score": total_users_with_non_zero_score,
            }
    
    total_users_above_threshold: MetaOapg.properties.total_users_above_threshold
    total_users_with_non_zero_score: MetaOapg.properties.total_users_with_non_zero_score
    persona_score_threshold: MetaOapg.properties.persona_score_threshold
    score_average: MetaOapg.properties.score_average
    score_percentiles: 'ModelsPersonaScorePercentiles'
    maximum_user_score: MetaOapg.properties.maximum_user_score
    minimum_user_score: MetaOapg.properties.minimum_user_score
    score_standard_deviation: MetaOapg.properties.score_standard_deviation
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_user_score"]) -> MetaOapg.properties.maximum_user_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_user_score"]) -> MetaOapg.properties.minimum_user_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persona_score_threshold"]) -> MetaOapg.properties.persona_score_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score_average"]) -> MetaOapg.properties.score_average: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score_percentiles"]) -> 'ModelsPersonaScorePercentiles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score_standard_deviation"]) -> MetaOapg.properties.score_standard_deviation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_users_above_threshold"]) -> MetaOapg.properties.total_users_above_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_users_with_non_zero_score"]) -> MetaOapg.properties.total_users_with_non_zero_score: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maximum_user_score", "minimum_user_score", "persona_score_threshold", "score_average", "score_percentiles", "score_standard_deviation", "total_users_above_threshold", "total_users_with_non_zero_score", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_user_score"]) -> MetaOapg.properties.maximum_user_score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_user_score"]) -> MetaOapg.properties.minimum_user_score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persona_score_threshold"]) -> MetaOapg.properties.persona_score_threshold: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score_average"]) -> MetaOapg.properties.score_average: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score_percentiles"]) -> 'ModelsPersonaScorePercentiles': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score_standard_deviation"]) -> MetaOapg.properties.score_standard_deviation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_users_above_threshold"]) -> MetaOapg.properties.total_users_above_threshold: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_users_with_non_zero_score"]) -> MetaOapg.properties.total_users_with_non_zero_score: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maximum_user_score", "minimum_user_score", "persona_score_threshold", "score_average", "score_percentiles", "score_standard_deviation", "total_users_above_threshold", "total_users_with_non_zero_score", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_users_above_threshold: typing.Union[MetaOapg.properties.total_users_above_threshold, decimal.Decimal, int, ],
        total_users_with_non_zero_score: typing.Union[MetaOapg.properties.total_users_with_non_zero_score, decimal.Decimal, int, ],
        persona_score_threshold: typing.Union[MetaOapg.properties.persona_score_threshold, decimal.Decimal, int, float, ],
        score_average: typing.Union[MetaOapg.properties.score_average, decimal.Decimal, int, float, ],
        score_percentiles: 'ModelsPersonaScorePercentiles',
        maximum_user_score: typing.Union[MetaOapg.properties.maximum_user_score, decimal.Decimal, int, float, ],
        minimum_user_score: typing.Union[MetaOapg.properties.minimum_user_score, decimal.Decimal, int, float, ],
        score_standard_deviation: typing.Union[MetaOapg.properties.score_standard_deviation, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsPersonaScoreStatistics':
        return super().__new__(
            cls,
            *args,
            total_users_above_threshold=total_users_above_threshold,
            total_users_with_non_zero_score=total_users_with_non_zero_score,
            persona_score_threshold=persona_score_threshold,
            score_average=score_average,
            score_percentiles=score_percentiles,
            maximum_user_score=maximum_user_score,
            minimum_user_score=minimum_user_score,
            score_standard_deviation=score_standard_deviation,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_persona_score_percentiles import ModelsPersonaScorePercentiles
