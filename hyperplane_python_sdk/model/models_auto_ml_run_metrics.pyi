# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsAutoMLRunMetrics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def cumulative_positive_rate() -> typing.Type['ModelsAutoMLRunMetricsCumulativePositiveRate']:
                return ModelsAutoMLRunMetricsCumulativePositiveRate
            label_positive_rate = schemas.NumberSchema
        
            @staticmethod
            def positive_rate_by_decile() -> typing.Type['ModelsAutoMLRunMetricsPositiveRateByDecile']:
                return ModelsAutoMLRunMetricsPositiveRateByDecile
            test_auc = schemas.NumberSchema
            test_ks = schemas.NumberSchema
            train_auc = schemas.NumberSchema
            train_ks = schemas.NumberSchema
            __annotations__ = {
                "cumulative_positive_rate": cumulative_positive_rate,
                "label_positive_rate": label_positive_rate,
                "positive_rate_by_decile": positive_rate_by_decile,
                "test_auc": test_auc,
                "test_ks": test_ks,
                "train_auc": train_auc,
                "train_ks": train_ks,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_positive_rate"]) -> 'ModelsAutoMLRunMetricsCumulativePositiveRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_positive_rate"]) -> MetaOapg.properties.label_positive_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positive_rate_by_decile"]) -> 'ModelsAutoMLRunMetricsPositiveRateByDecile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_auc"]) -> MetaOapg.properties.test_auc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_ks"]) -> MetaOapg.properties.test_ks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["train_auc"]) -> MetaOapg.properties.train_auc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["train_ks"]) -> MetaOapg.properties.train_ks: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cumulative_positive_rate", "label_positive_rate", "positive_rate_by_decile", "test_auc", "test_ks", "train_auc", "train_ks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_positive_rate"]) -> typing.Union['ModelsAutoMLRunMetricsCumulativePositiveRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_positive_rate"]) -> typing.Union[MetaOapg.properties.label_positive_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positive_rate_by_decile"]) -> typing.Union['ModelsAutoMLRunMetricsPositiveRateByDecile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_auc"]) -> typing.Union[MetaOapg.properties.test_auc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_ks"]) -> typing.Union[MetaOapg.properties.test_ks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["train_auc"]) -> typing.Union[MetaOapg.properties.train_auc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["train_ks"]) -> typing.Union[MetaOapg.properties.train_ks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cumulative_positive_rate", "label_positive_rate", "positive_rate_by_decile", "test_auc", "test_ks", "train_auc", "train_ks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cumulative_positive_rate: typing.Union['ModelsAutoMLRunMetricsCumulativePositiveRate', schemas.Unset] = schemas.unset,
        label_positive_rate: typing.Union[MetaOapg.properties.label_positive_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        positive_rate_by_decile: typing.Union['ModelsAutoMLRunMetricsPositiveRateByDecile', schemas.Unset] = schemas.unset,
        test_auc: typing.Union[MetaOapg.properties.test_auc, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        test_ks: typing.Union[MetaOapg.properties.test_ks, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        train_auc: typing.Union[MetaOapg.properties.train_auc, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        train_ks: typing.Union[MetaOapg.properties.train_ks, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsAutoMLRunMetrics':
        return super().__new__(
            cls,
            *args,
            cumulative_positive_rate=cumulative_positive_rate,
            label_positive_rate=label_positive_rate,
            positive_rate_by_decile=positive_rate_by_decile,
            test_auc=test_auc,
            test_ks=test_ks,
            train_auc=train_auc,
            train_ks=train_ks,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_auto_ml_run_metrics_cumulative_positive_rate import ModelsAutoMLRunMetricsCumulativePositiveRate
from hyperplane_python_sdk.model.models_auto_ml_run_metrics_positive_rate_by_decile import ModelsAutoMLRunMetricsPositiveRateByDecile
