# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsCashflowWindowStatistics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Inflow and outflow for a given user in a given time window
    """


    class MetaOapg:
        
        class properties:
            inflow_amount = schemas.NumberSchema
            outflow_amount = schemas.NumberSchema
            window_end = schemas.StrSchema
            window_start = schemas.StrSchema
            __annotations__ = {
                "inflow_amount": inflow_amount,
                "outflow_amount": outflow_amount,
                "window_end": window_end,
                "window_start": window_start,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflow_amount"]) -> MetaOapg.properties.inflow_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outflow_amount"]) -> MetaOapg.properties.outflow_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["window_end"]) -> MetaOapg.properties.window_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["window_start"]) -> MetaOapg.properties.window_start: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["inflow_amount", "outflow_amount", "window_end", "window_start", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflow_amount"]) -> typing.Union[MetaOapg.properties.inflow_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outflow_amount"]) -> typing.Union[MetaOapg.properties.outflow_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["window_end"]) -> typing.Union[MetaOapg.properties.window_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["window_start"]) -> typing.Union[MetaOapg.properties.window_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inflow_amount", "outflow_amount", "window_end", "window_start", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        inflow_amount: typing.Union[MetaOapg.properties.inflow_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        outflow_amount: typing.Union[MetaOapg.properties.outflow_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        window_end: typing.Union[MetaOapg.properties.window_end, str, schemas.Unset] = schemas.unset,
        window_start: typing.Union[MetaOapg.properties.window_start, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsCashflowWindowStatistics':
        return super().__new__(
            cls,
            *args,
            inflow_amount=inflow_amount,
            outflow_amount=outflow_amount,
            window_end=window_end,
            window_start=window_start,
            _configuration=_configuration,
            **kwargs,
        )
