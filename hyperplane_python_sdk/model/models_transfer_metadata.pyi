# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTransferMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Metadata related to the money transfer and involved parties
    """


    class MetaOapg:
        
        class properties:
            payment_method = schemas.StrSchema
            reason = schemas.StrSchema
        
            @staticmethod
            def receiver() -> typing.Type['ModelsTransferParty']:
                return ModelsTransferParty
            reference_number = schemas.StrSchema
        
            @staticmethod
            def sender() -> typing.Type['ModelsTransferParty']:
                return ModelsTransferParty
            __annotations__ = {
                "payment_method": payment_method,
                "reason": reason,
                "receiver": receiver,
                "reference_number": reference_number,
                "sender": sender,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver"]) -> 'ModelsTransferParty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender"]) -> 'ModelsTransferParty': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payment_method", "reason", "receiver", "reference_number", "sender", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver"]) -> typing.Union['ModelsTransferParty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_number"]) -> typing.Union[MetaOapg.properties.reference_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender"]) -> typing.Union['ModelsTransferParty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payment_method", "reason", "receiver", "reference_number", "sender", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payment_method: typing.Union[MetaOapg.properties.payment_method, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        receiver: typing.Union['ModelsTransferParty', schemas.Unset] = schemas.unset,
        reference_number: typing.Union[MetaOapg.properties.reference_number, str, schemas.Unset] = schemas.unset,
        sender: typing.Union['ModelsTransferParty', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTransferMetadata':
        return super().__new__(
            cls,
            *args,
            payment_method=payment_method,
            reason=reason,
            receiver=receiver,
            reference_number=reference_number,
            sender=sender,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_transfer_party import ModelsTransferParty
