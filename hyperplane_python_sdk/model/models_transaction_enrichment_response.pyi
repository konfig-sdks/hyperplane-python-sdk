# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTransactionEnrichmentResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            amount = schemas.NumberSchema
            category = schemas.StrSchema
            category_name = schemas.StrSchema
            currency = schemas.StrSchema
            current_installment = schemas.IntSchema
            date = schemas.StrSchema
            installment_start_date = schemas.StrSchema
        
            @staticmethod
            def merchant_info() -> typing.Type['ModelsMerchantInfo']:
                return ModelsMerchantInfo
            number_of_installments = schemas.IntSchema
            total_installed_amount = schemas.NumberSchema
            transaction_id = schemas.StrSchema
        
            @staticmethod
            def transaction_location() -> typing.Type['ModelsLocation']:
                return ModelsLocation
            transaction_status = schemas.StrSchema
        
            @staticmethod
            def transfer_metadata() -> typing.Type['ModelsTransferMetadata']:
                return ModelsTransferMetadata
            __annotations__ = {
                "description": description,
                "amount": amount,
                "category": category,
                "category_name": category_name,
                "currency": currency,
                "current_installment": current_installment,
                "date": date,
                "installment_start_date": installment_start_date,
                "merchant_info": merchant_info,
                "number_of_installments": number_of_installments,
                "total_installed_amount": total_installed_amount,
                "transaction_id": transaction_id,
                "transaction_location": transaction_location,
                "transaction_status": transaction_status,
                "transfer_metadata": transfer_metadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_installment"]) -> MetaOapg.properties.current_installment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installment_start_date"]) -> MetaOapg.properties.installment_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_info"]) -> 'ModelsMerchantInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_installments"]) -> MetaOapg.properties.number_of_installments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_installed_amount"]) -> MetaOapg.properties.total_installed_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_location"]) -> 'ModelsLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_status"]) -> MetaOapg.properties.transaction_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_metadata"]) -> 'ModelsTransferMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "amount", "category", "category_name", "currency", "current_installment", "date", "installment_start_date", "merchant_info", "number_of_installments", "total_installed_amount", "transaction_id", "transaction_location", "transaction_status", "transfer_metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> typing.Union[MetaOapg.properties.category_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_installment"]) -> typing.Union[MetaOapg.properties.current_installment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installment_start_date"]) -> typing.Union[MetaOapg.properties.installment_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_info"]) -> typing.Union['ModelsMerchantInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_installments"]) -> typing.Union[MetaOapg.properties.number_of_installments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_installed_amount"]) -> typing.Union[MetaOapg.properties.total_installed_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> typing.Union[MetaOapg.properties.transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_location"]) -> typing.Union['ModelsLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_status"]) -> typing.Union[MetaOapg.properties.transaction_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_metadata"]) -> typing.Union['ModelsTransferMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "amount", "category", "category_name", "currency", "current_installment", "date", "installment_start_date", "merchant_info", "number_of_installments", "total_installed_amount", "transaction_id", "transaction_location", "transaction_status", "transfer_metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        category_name: typing.Union[MetaOapg.properties.category_name, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        current_installment: typing.Union[MetaOapg.properties.current_installment, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        installment_start_date: typing.Union[MetaOapg.properties.installment_start_date, str, schemas.Unset] = schemas.unset,
        merchant_info: typing.Union['ModelsMerchantInfo', schemas.Unset] = schemas.unset,
        number_of_installments: typing.Union[MetaOapg.properties.number_of_installments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_installed_amount: typing.Union[MetaOapg.properties.total_installed_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, schemas.Unset] = schemas.unset,
        transaction_location: typing.Union['ModelsLocation', schemas.Unset] = schemas.unset,
        transaction_status: typing.Union[MetaOapg.properties.transaction_status, str, schemas.Unset] = schemas.unset,
        transfer_metadata: typing.Union['ModelsTransferMetadata', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTransactionEnrichmentResponse':
        return super().__new__(
            cls,
            *args,
            description=description,
            amount=amount,
            category=category,
            category_name=category_name,
            currency=currency,
            current_installment=current_installment,
            date=date,
            installment_start_date=installment_start_date,
            merchant_info=merchant_info,
            number_of_installments=number_of_installments,
            total_installed_amount=total_installed_amount,
            transaction_id=transaction_id,
            transaction_location=transaction_location,
            transaction_status=transaction_status,
            transfer_metadata=transfer_metadata,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_location import ModelsLocation
from hyperplane_python_sdk.model.models_merchant_info import ModelsMerchantInfo
from hyperplane_python_sdk.model.models_transfer_metadata import ModelsTransferMetadata
