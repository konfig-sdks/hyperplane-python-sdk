# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTransactionEnrichmentStatisticsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    General statistics for a given transaction enrichment module
    """


    class MetaOapg:
        required = {
            "user_reach",
            "transaction_count",
        }
        
        class properties:
            transaction_count = schemas.IntSchema
            user_reach = schemas.IntSchema
            __annotations__ = {
                "transaction_count": transaction_count,
                "user_reach": user_reach,
            }
    
    user_reach: MetaOapg.properties.user_reach
    transaction_count: MetaOapg.properties.transaction_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_count"]) -> MetaOapg.properties.transaction_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_reach"]) -> MetaOapg.properties.user_reach: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_count", "user_reach", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_count"]) -> MetaOapg.properties.transaction_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_reach"]) -> MetaOapg.properties.user_reach: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_count", "user_reach", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_reach: typing.Union[MetaOapg.properties.user_reach, decimal.Decimal, int, ],
        transaction_count: typing.Union[MetaOapg.properties.transaction_count, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTransactionEnrichmentStatisticsResponse':
        return super().__new__(
            cls,
            *args,
            user_reach=user_reach,
            transaction_count=transaction_count,
            _configuration=_configuration,
            **kwargs,
        )
