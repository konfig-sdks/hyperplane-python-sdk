# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTransactionEnrichmentUser(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "user_id",
            "first_transaction_date",
            "last_transaction_date",
        }
        
        class properties:
            first_transaction_date = schemas.StrSchema
            last_transaction_date = schemas.StrSchema
            user_id = schemas.StrSchema
            __annotations__ = {
                "first_transaction_date": first_transaction_date,
                "last_transaction_date": last_transaction_date,
                "user_id": user_id,
            }
    
    user_id: MetaOapg.properties.user_id
    first_transaction_date: MetaOapg.properties.first_transaction_date
    last_transaction_date: MetaOapg.properties.last_transaction_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_transaction_date"]) -> MetaOapg.properties.first_transaction_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_transaction_date"]) -> MetaOapg.properties.last_transaction_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_transaction_date", "last_transaction_date", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_transaction_date"]) -> MetaOapg.properties.first_transaction_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_transaction_date"]) -> MetaOapg.properties.last_transaction_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_transaction_date", "last_transaction_date", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, ],
        first_transaction_date: typing.Union[MetaOapg.properties.first_transaction_date, str, ],
        last_transaction_date: typing.Union[MetaOapg.properties.last_transaction_date, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTransactionEnrichmentUser':
        return super().__new__(
            cls,
            *args,
            user_id=user_id,
            first_transaction_date=first_transaction_date,
            last_transaction_date=last_transaction_date,
            _configuration=_configuration,
            **kwargs,
        )
