# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsUserCashflowPerCategoryResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class inflow_categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsTopLevelCategoryCashflow']:
                        return ModelsTopLevelCategoryCashflow
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsTopLevelCategoryCashflow'], typing.List['ModelsTopLevelCategoryCashflow']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inflow_categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsTopLevelCategoryCashflow':
                    return super().__getitem__(i)
            
            
            class outflow_categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsTopLevelCategoryCashflow']:
                        return ModelsTopLevelCategoryCashflow
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsTopLevelCategoryCashflow'], typing.List['ModelsTopLevelCategoryCashflow']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outflow_categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsTopLevelCategoryCashflow':
                    return super().__getitem__(i)
            user_id = schemas.StrSchema
            __annotations__ = {
                "inflow_categories": inflow_categories,
                "outflow_categories": outflow_categories,
                "user_id": user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflow_categories"]) -> MetaOapg.properties.inflow_categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outflow_categories"]) -> MetaOapg.properties.outflow_categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["inflow_categories", "outflow_categories", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflow_categories"]) -> typing.Union[MetaOapg.properties.inflow_categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outflow_categories"]) -> typing.Union[MetaOapg.properties.outflow_categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inflow_categories", "outflow_categories", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        inflow_categories: typing.Union[MetaOapg.properties.inflow_categories, list, tuple, schemas.Unset] = schemas.unset,
        outflow_categories: typing.Union[MetaOapg.properties.outflow_categories, list, tuple, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsUserCashflowPerCategoryResponse':
        return super().__new__(
            cls,
            *args,
            inflow_categories=inflow_categories,
            outflow_categories=outflow_categories,
            user_id=user_id,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_top_level_category_cashflow import ModelsTopLevelCategoryCashflow
