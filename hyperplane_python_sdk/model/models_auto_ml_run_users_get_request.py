# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsAutoMLRunUsersGetRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class allow_users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsUserMetadata']:
                        return ModelsUserMetadata
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsUserMetadata'], typing.List['ModelsUserMetadata']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allow_users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsUserMetadata':
                    return super().__getitem__(i)
            
            
            class block_users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsUserMetadata']:
                        return ModelsUserMetadata
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsUserMetadata'], typing.List['ModelsUserMetadata']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'block_users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsUserMetadata':
                    return super().__getitem__(i)
            
            
            class tag_filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsTagCategoricalAttributeFilter']:
                        return ModelsTagCategoricalAttributeFilter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsTagCategoricalAttributeFilter'], typing.List['ModelsTagCategoricalAttributeFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tag_filters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsTagCategoricalAttributeFilter':
                    return super().__getitem__(i)
            __annotations__ = {
                "allow_users": allow_users,
                "block_users": block_users,
                "tag_filters": tag_filters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_users"]) -> MetaOapg.properties.allow_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_users"]) -> MetaOapg.properties.block_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_filters"]) -> MetaOapg.properties.tag_filters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow_users", "block_users", "tag_filters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_users"]) -> typing.Union[MetaOapg.properties.allow_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_users"]) -> typing.Union[MetaOapg.properties.block_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_filters"]) -> typing.Union[MetaOapg.properties.tag_filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow_users", "block_users", "tag_filters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allow_users: typing.Union[MetaOapg.properties.allow_users, list, tuple, schemas.Unset] = schemas.unset,
        block_users: typing.Union[MetaOapg.properties.block_users, list, tuple, schemas.Unset] = schemas.unset,
        tag_filters: typing.Union[MetaOapg.properties.tag_filters, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsAutoMLRunUsersGetRequest':
        return super().__new__(
            cls,
            *args,
            allow_users=allow_users,
            block_users=block_users,
            tag_filters=tag_filters,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_tag_categorical_attribute_filter import ModelsTagCategoricalAttributeFilter
from hyperplane_python_sdk.model.models_user_metadata import ModelsUserMetadata
