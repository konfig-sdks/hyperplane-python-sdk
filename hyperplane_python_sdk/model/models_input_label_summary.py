# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsInputLabelSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "num_input_labels",
            "num_training_users",
            "num_matched_labels",
            "num_input_users",
        }
        
        class properties:
            num_input_labels = schemas.IntSchema
            num_input_users = schemas.IntSchema
            num_matched_labels = schemas.IntSchema
            num_training_users = schemas.IntSchema
        
            @staticmethod
            def label_weight_counts() -> typing.Type['ModelsInputLabelSummaryLabelWeightCounts']:
                return ModelsInputLabelSummaryLabelWeightCounts
        
            @staticmethod
            def monthly_counts() -> typing.Type['ModelsInputLabelSummaryMonthlyCounts']:
                return ModelsInputLabelSummaryMonthlyCounts
        
            @staticmethod
            def monthly_positive_rates() -> typing.Type['ModelsInputLabelSummaryMonthlyPositiveRates']:
                return ModelsInputLabelSummaryMonthlyPositiveRates
            __annotations__ = {
                "num_input_labels": num_input_labels,
                "num_input_users": num_input_users,
                "num_matched_labels": num_matched_labels,
                "num_training_users": num_training_users,
                "label_weight_counts": label_weight_counts,
                "monthly_counts": monthly_counts,
                "monthly_positive_rates": monthly_positive_rates,
            }
    
    num_input_labels: MetaOapg.properties.num_input_labels
    num_training_users: MetaOapg.properties.num_training_users
    num_matched_labels: MetaOapg.properties.num_matched_labels
    num_input_users: MetaOapg.properties.num_input_users
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_input_labels"]) -> MetaOapg.properties.num_input_labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_input_users"]) -> MetaOapg.properties.num_input_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_matched_labels"]) -> MetaOapg.properties.num_matched_labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_training_users"]) -> MetaOapg.properties.num_training_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_weight_counts"]) -> 'ModelsInputLabelSummaryLabelWeightCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_counts"]) -> 'ModelsInputLabelSummaryMonthlyCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_positive_rates"]) -> 'ModelsInputLabelSummaryMonthlyPositiveRates': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["num_input_labels", "num_input_users", "num_matched_labels", "num_training_users", "label_weight_counts", "monthly_counts", "monthly_positive_rates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_input_labels"]) -> MetaOapg.properties.num_input_labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_input_users"]) -> MetaOapg.properties.num_input_users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_matched_labels"]) -> MetaOapg.properties.num_matched_labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_training_users"]) -> MetaOapg.properties.num_training_users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_weight_counts"]) -> typing.Union['ModelsInputLabelSummaryLabelWeightCounts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_counts"]) -> typing.Union['ModelsInputLabelSummaryMonthlyCounts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_positive_rates"]) -> typing.Union['ModelsInputLabelSummaryMonthlyPositiveRates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["num_input_labels", "num_input_users", "num_matched_labels", "num_training_users", "label_weight_counts", "monthly_counts", "monthly_positive_rates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        num_input_labels: typing.Union[MetaOapg.properties.num_input_labels, decimal.Decimal, int, ],
        num_training_users: typing.Union[MetaOapg.properties.num_training_users, decimal.Decimal, int, ],
        num_matched_labels: typing.Union[MetaOapg.properties.num_matched_labels, decimal.Decimal, int, ],
        num_input_users: typing.Union[MetaOapg.properties.num_input_users, decimal.Decimal, int, ],
        label_weight_counts: typing.Union['ModelsInputLabelSummaryLabelWeightCounts', schemas.Unset] = schemas.unset,
        monthly_counts: typing.Union['ModelsInputLabelSummaryMonthlyCounts', schemas.Unset] = schemas.unset,
        monthly_positive_rates: typing.Union['ModelsInputLabelSummaryMonthlyPositiveRates', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsInputLabelSummary':
        return super().__new__(
            cls,
            *args,
            num_input_labels=num_input_labels,
            num_training_users=num_training_users,
            num_matched_labels=num_matched_labels,
            num_input_users=num_input_users,
            label_weight_counts=label_weight_counts,
            monthly_counts=monthly_counts,
            monthly_positive_rates=monthly_positive_rates,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_input_label_summary_label_weight_counts import ModelsInputLabelSummaryLabelWeightCounts
from hyperplane_python_sdk.model.models_input_label_summary_monthly_counts import ModelsInputLabelSummaryMonthlyCounts
from hyperplane_python_sdk.model.models_input_label_summary_monthly_positive_rates import ModelsInputLabelSummaryMonthlyPositiveRates
