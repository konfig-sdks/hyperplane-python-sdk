# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsPostPersonaUsersRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Extra information for filtering users
    """


    class MetaOapg:
        required = {
            "blocklist",
            "branch",
        }
        
        class properties:
        
            @staticmethod
            def blocklist() -> typing.Type['ModelsPostPersonaUsersRequestBlocklist']:
                return ModelsPostPersonaUsersRequestBlocklist
        
            @staticmethod
            def branch() -> typing.Type['ModelsCategoricalAttributeFilter']:
                return ModelsCategoricalAttributeFilter
        
            @staticmethod
            def birth_date() -> typing.Type['ModelsTimestampAttributeFilter']:
                return ModelsTimestampAttributeFilter
        
            @staticmethod
            def cbo_code() -> typing.Type['ModelsCategoricalAttributeFilter']:
                return ModelsCategoricalAttributeFilter
        
            @staticmethod
            def declared_monthly_income() -> typing.Type['ModelsNumericalAttributeFilter']:
                return ModelsNumericalAttributeFilter
        
            @staticmethod
            def job_title() -> typing.Type['ModelsCategoricalAttributeFilter']:
                return ModelsCategoricalAttributeFilter
            __annotations__ = {
                "blocklist": blocklist,
                "branch": branch,
                "birth_date": birth_date,
                "cbo_code": cbo_code,
                "declared_monthly_income": declared_monthly_income,
                "job_title": job_title,
            }
    
    blocklist: 'ModelsPostPersonaUsersRequestBlocklist'
    branch: 'ModelsCategoricalAttributeFilter'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocklist"]) -> 'ModelsPostPersonaUsersRequestBlocklist': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> 'ModelsCategoricalAttributeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> 'ModelsTimestampAttributeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cbo_code"]) -> 'ModelsCategoricalAttributeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declared_monthly_income"]) -> 'ModelsNumericalAttributeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> 'ModelsCategoricalAttributeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blocklist", "branch", "birth_date", "cbo_code", "declared_monthly_income", "job_title", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocklist"]) -> 'ModelsPostPersonaUsersRequestBlocklist': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> 'ModelsCategoricalAttributeFilter': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union['ModelsTimestampAttributeFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cbo_code"]) -> typing.Union['ModelsCategoricalAttributeFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declared_monthly_income"]) -> typing.Union['ModelsNumericalAttributeFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union['ModelsCategoricalAttributeFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blocklist", "branch", "birth_date", "cbo_code", "declared_monthly_income", "job_title", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blocklist: 'ModelsPostPersonaUsersRequestBlocklist',
        branch: 'ModelsCategoricalAttributeFilter',
        birth_date: typing.Union['ModelsTimestampAttributeFilter', schemas.Unset] = schemas.unset,
        cbo_code: typing.Union['ModelsCategoricalAttributeFilter', schemas.Unset] = schemas.unset,
        declared_monthly_income: typing.Union['ModelsNumericalAttributeFilter', schemas.Unset] = schemas.unset,
        job_title: typing.Union['ModelsCategoricalAttributeFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsPostPersonaUsersRequest':
        return super().__new__(
            cls,
            *args,
            blocklist=blocklist,
            branch=branch,
            birth_date=birth_date,
            cbo_code=cbo_code,
            declared_monthly_income=declared_monthly_income,
            job_title=job_title,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_categorical_attribute_filter import ModelsCategoricalAttributeFilter
from hyperplane_python_sdk.model.models_numerical_attribute_filter import ModelsNumericalAttributeFilter
from hyperplane_python_sdk.model.models_post_persona_users_request_blocklist import ModelsPostPersonaUsersRequestBlocklist
from hyperplane_python_sdk.model.models_timestamp_attribute_filter import ModelsTimestampAttributeFilter
