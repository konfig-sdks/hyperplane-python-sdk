# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTagCategoricalAttributeFilter(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "allowed_values",
            "tag_name",
            "blocked_values",
        }
        
        class properties:
        
            @staticmethod
            def allowed_values() -> typing.Type['ModelsTagCategoricalAttributeFilterAllowedValues']:
                return ModelsTagCategoricalAttributeFilterAllowedValues
        
            @staticmethod
            def blocked_values() -> typing.Type['ModelsTagCategoricalAttributeFilterBlockedValues']:
                return ModelsTagCategoricalAttributeFilterBlockedValues
            tag_name = schemas.StrSchema
            __annotations__ = {
                "allowed_values": allowed_values,
                "blocked_values": blocked_values,
                "tag_name": tag_name,
            }
    
    allowed_values: 'ModelsTagCategoricalAttributeFilterAllowedValues'
    tag_name: MetaOapg.properties.tag_name
    blocked_values: 'ModelsTagCategoricalAttributeFilterBlockedValues'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_values"]) -> 'ModelsTagCategoricalAttributeFilterAllowedValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocked_values"]) -> 'ModelsTagCategoricalAttributeFilterBlockedValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowed_values", "blocked_values", "tag_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_values"]) -> 'ModelsTagCategoricalAttributeFilterAllowedValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocked_values"]) -> 'ModelsTagCategoricalAttributeFilterBlockedValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowed_values", "blocked_values", "tag_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allowed_values: 'ModelsTagCategoricalAttributeFilterAllowedValues',
        tag_name: typing.Union[MetaOapg.properties.tag_name, str, ],
        blocked_values: 'ModelsTagCategoricalAttributeFilterBlockedValues',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTagCategoricalAttributeFilter':
        return super().__new__(
            cls,
            *args,
            allowed_values=allowed_values,
            tag_name=tag_name,
            blocked_values=blocked_values,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_tag_categorical_attribute_filter_allowed_values import ModelsTagCategoricalAttributeFilterAllowedValues
from hyperplane_python_sdk.model.models_tag_categorical_attribute_filter_blocked_values import ModelsTagCategoricalAttributeFilterBlockedValues
