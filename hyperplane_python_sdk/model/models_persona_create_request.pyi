# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsPersonaCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Defines a persona. Stores various weighted facets including their interests, demographics, location, company affinity, as well as predefined personas.
    """


    class MetaOapg:
        required = {
            "persona_name",
        }
        
        class properties:
            persona_name = schemas.StrSchema
            
            
            class company_facets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsFacetWeightObject']:
                        return ModelsFacetWeightObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsFacetWeightObject'], typing.List['ModelsFacetWeightObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'company_facets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsFacetWeightObject':
                    return super().__getitem__(i)
            
            
            class demographic_facets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsFacetWeightObject']:
                        return ModelsFacetWeightObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsFacetWeightObject'], typing.List['ModelsFacetWeightObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'demographic_facets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsFacetWeightObject':
                    return super().__getitem__(i)
            
            
            class interest_facets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsFacetWeightObject']:
                        return ModelsFacetWeightObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsFacetWeightObject'], typing.List['ModelsFacetWeightObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interest_facets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsFacetWeightObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def locations() -> typing.Type['ModelsPersonaCreateRequestLocations']:
                return ModelsPersonaCreateRequestLocations
            
            
            class pre_defined_personas(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelsFacetWeightObject']:
                        return ModelsFacetWeightObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelsFacetWeightObject'], typing.List['ModelsFacetWeightObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pre_defined_personas':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelsFacetWeightObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "persona_name": persona_name,
                "company_facets": company_facets,
                "demographic_facets": demographic_facets,
                "interest_facets": interest_facets,
                "locations": locations,
                "pre_defined_personas": pre_defined_personas,
            }
    
    persona_name: MetaOapg.properties.persona_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persona_name"]) -> MetaOapg.properties.persona_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_facets"]) -> MetaOapg.properties.company_facets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demographic_facets"]) -> MetaOapg.properties.demographic_facets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest_facets"]) -> MetaOapg.properties.interest_facets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> 'ModelsPersonaCreateRequestLocations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pre_defined_personas"]) -> MetaOapg.properties.pre_defined_personas: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["persona_name", "company_facets", "demographic_facets", "interest_facets", "locations", "pre_defined_personas", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persona_name"]) -> MetaOapg.properties.persona_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_facets"]) -> typing.Union[MetaOapg.properties.company_facets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demographic_facets"]) -> typing.Union[MetaOapg.properties.demographic_facets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest_facets"]) -> typing.Union[MetaOapg.properties.interest_facets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union['ModelsPersonaCreateRequestLocations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pre_defined_personas"]) -> typing.Union[MetaOapg.properties.pre_defined_personas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["persona_name", "company_facets", "demographic_facets", "interest_facets", "locations", "pre_defined_personas", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        persona_name: typing.Union[MetaOapg.properties.persona_name, str, ],
        company_facets: typing.Union[MetaOapg.properties.company_facets, list, tuple, schemas.Unset] = schemas.unset,
        demographic_facets: typing.Union[MetaOapg.properties.demographic_facets, list, tuple, schemas.Unset] = schemas.unset,
        interest_facets: typing.Union[MetaOapg.properties.interest_facets, list, tuple, schemas.Unset] = schemas.unset,
        locations: typing.Union['ModelsPersonaCreateRequestLocations', schemas.Unset] = schemas.unset,
        pre_defined_personas: typing.Union[MetaOapg.properties.pre_defined_personas, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsPersonaCreateRequest':
        return super().__new__(
            cls,
            *args,
            persona_name=persona_name,
            company_facets=company_facets,
            demographic_facets=demographic_facets,
            interest_facets=interest_facets,
            locations=locations,
            pre_defined_personas=pre_defined_personas,
            _configuration=_configuration,
            **kwargs,
        )

from hyperplane_python_sdk.model.models_facet_weight_object import ModelsFacetWeightObject
from hyperplane_python_sdk.model.models_persona_create_request_locations import ModelsPersonaCreateRequestLocations
