# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperplane_python_sdk import schemas  # noqa: F401


class ModelsTransferParty(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Attributes related to the sender or receiver of a given transaction
    """


    class MetaOapg:
        
        class properties:
            account_number = schemas.StrSchema
            branch_number = schemas.StrSchema
            document_name = schemas.StrSchema
            document_number = schemas.StrSchema
            name = schemas.StrSchema
            routing_number = schemas.StrSchema
            routing_number_ISPB = schemas.StrSchema
            __annotations__ = {
                "account_number": account_number,
                "branch_number": branch_number,
                "document_name": document_name,
                "document_number": document_number,
                "name": name,
                "routing_number": routing_number,
                "routing_number_ISPB": routing_number_ISPB,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch_number"]) -> MetaOapg.properties.branch_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_name"]) -> MetaOapg.properties.document_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_number"]) -> MetaOapg.properties.document_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number_ISPB"]) -> MetaOapg.properties.routing_number_ISPB: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_number", "branch_number", "document_name", "document_number", "name", "routing_number", "routing_number_ISPB", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> typing.Union[MetaOapg.properties.account_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch_number"]) -> typing.Union[MetaOapg.properties.branch_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_name"]) -> typing.Union[MetaOapg.properties.document_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_number"]) -> typing.Union[MetaOapg.properties.document_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number"]) -> typing.Union[MetaOapg.properties.routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number_ISPB"]) -> typing.Union[MetaOapg.properties.routing_number_ISPB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_number", "branch_number", "document_name", "document_number", "name", "routing_number", "routing_number_ISPB", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, schemas.Unset] = schemas.unset,
        branch_number: typing.Union[MetaOapg.properties.branch_number, str, schemas.Unset] = schemas.unset,
        document_name: typing.Union[MetaOapg.properties.document_name, str, schemas.Unset] = schemas.unset,
        document_number: typing.Union[MetaOapg.properties.document_number, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        routing_number: typing.Union[MetaOapg.properties.routing_number, str, schemas.Unset] = schemas.unset,
        routing_number_ISPB: typing.Union[MetaOapg.properties.routing_number_ISPB, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelsTransferParty':
        return super().__new__(
            cls,
            *args,
            account_number=account_number,
            branch_number=branch_number,
            document_name=document_name,
            document_number=document_number,
            name=name,
            routing_number=routing_number,
            routing_number_ISPB=routing_number_ISPB,
            _configuration=_configuration,
            **kwargs,
        )
