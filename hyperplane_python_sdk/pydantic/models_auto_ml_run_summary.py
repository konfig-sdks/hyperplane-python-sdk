# coding: utf-8

"""
    Hyperplane API Gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from hyperplane_python_sdk.pydantic.models_auto_ml_run_metrics import ModelsAutoMLRunMetrics
from hyperplane_python_sdk.pydantic.models_input_label_summary import ModelsInputLabelSummary

class ModelsAutoMLRunSummary(BaseModel):
    # RunDescription is the description of the AutoML training run
    run_description: str = Field(alias='run_description')

    # RunID is the unique identifier for the AutoML run
    run_id: str = Field(alias='run_id')

    # RunStatus is the status of the AutoML training run
    status: str = Field(alias='status')

    # Timestamp is the time when the training run began
    timestamp: str = Field(alias='timestamp')

    # Engagement type of this product run
    engagement_type: typing.Optional[str] = Field(None, alias='engagement_type')

    # Analysis of input labels detailing amounts of labels given, amounts of labels detected, monthly breakdowns of positive rates and counts, and a breakdown of weights by label value.
    input_label_summary: typing.Optional[ModelsInputLabelSummary] = Field(None, alias='input_label_summary')

    # NumberOfInferenceUsers is the number of users in model inference
    number_of_inference_users: typing.Optional[int] = Field(None, alias='number_of_inference_users')

    # NumberOfTrainUsers is the number of users in model training
    number_of_train_users: typing.Optional[int] = Field(None, alias='number_of_train_users')

    # RunMetrics is the metrics of the AutoML training run
    run_metrics: typing.Optional[ModelsAutoMLRunMetrics] = Field(None, alias='run_metrics')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
